{"version":3,"file":"activateCallback-es.js","sources":["../resources/activateCallback.js"],"sourcesContent":["/**\n * @file Note that this should be kept as a polyglot client-server file\n *    (besides the server, it is to be invoked by the project service worker).\n */\n/* eslint-env worker */\n\nconst {ceil} = Math;\nconst arrayChunk = (arr, size) => {\n  return Array.from({length: ceil(arr.length / size)}, (_, i) => {\n    const offset = i * size;\n    return arr.slice(offset, offset + size);\n  });\n};\n\n// Todo: If fetching fails here (or in install), e.g., because activate event\n//          never completed\n//          to cache, de-register and re-register (?); how to detect if all\n//          files in cache?\n// Todo: Check `oldVersion` and run this first if still too old\n\nasync function getJSON (url) {\n  const resp = await fetch(url);\n  return await resp.json();\n}\n\n/**\n* @callback Logger\n* @param {...any} args\n* @returns {void}\n*/\n\n/**\n * @param {PlainObject} cfg\n * @param {string} cfg.namespace\n * @param {string[]} cfg.files\n * @param {Logger} cfg.log\n * @param {string[]} [cfg.works=[]]\n * @param {string[]} [cfg.removals=[]]\n * @param {string} [cfg.basePath=\"\"]\n * @param {string} [cfg.dbVersion=1]\n * @returns {Promise<void>}\n */\nexport default async function activateCallback ({\n  namespace, files, log, works = [], removals = [], basePath = '', dbVersion = 1\n}) {\n  // Now we know we have the files cached, we can postpone\n  //  the `indexedDB` processing (which will work offline\n  //  anyways); also important to avoid conflicts with\n  //  already-running versions upon future sw updates\n  log('Activate: Callback called');\n  const {groups} = await getJSON(files);\n\n  const addJSONFetch = (arr, path) => {\n    arr.push(\n      (async () => await getJSON(basePath + path))()\n    );\n  };\n\n  const dataFileNames = [];\n  const dataFiles = [];\n  const schemaFiles = [];\n  const metadataFiles = [];\n  groups.forEach(\n    ({files: fileObjs, metadataBaseDirectory, schemaBaseDirectory}) => {\n      fileObjs.filter(({name}) => {\n        // We don't want to import files unless specified by user (or if\n        //   needed due to a version update)\n        return works.includes(name);\n      }).forEach(({file: {$ref: filePath}, metadataFile, schemaFile, name}) => {\n        // We don't i18nize the name here\n        dataFileNames.push(name);\n        addJSONFetch(dataFiles, filePath);\n        addJSONFetch(metadataFiles, metadataBaseDirectory + '/' + metadataFile);\n        addJSONFetch(schemaFiles, schemaBaseDirectory + '/' + schemaFile);\n      });\n    }\n  );\n  const promises = await Promise.all([\n    ...dataFiles, ...schemaFiles, ...metadataFiles\n  ]);\n  const chunked = arrayChunk(promises, dataFiles.length);\n  const [\n    dataFileResponses = [], schemaFileResponses, metadataFileResponses\n  ] = chunked;\n\n  log('Activate: Files fetched');\n\n  const dbName = namespace + '-textbrowser-cache-data';\n\n  // indexedDB.deleteDatabase(dbName);\n  return new Promise((resolve, reject) => {\n    const req = indexedDB.open(dbName, dbVersion);\n    req.addEventListener('upgradeneeded', ({target: {result: db}}) => {\n      db.onversionchange = () => {\n        db.close();\n        const err = new Error('versionchange');\n        err.type = 'versionchange';\n        reject(err);\n      };\n\n      removals.forEach((removal) => {\n        db.deleteObjectStore('files-to-cache-' + removal);\n      });\n\n      dataFileResponses.forEach(({data: tableRows}, i) => {\n        const dataFileName = dataFileNames[i];\n\n        let store;\n        try {\n          store = db.createObjectStore('files-to-cache-' + dataFileName);\n        } catch (err) {\n          // User has specified an existing item again, so ignore\n          return;\n        }\n        // Todo: Should also look at `works` and object stores and clean up\n        //  any that were not supplied.\n\n        const schemaFileResponse = schemaFileResponses[i];\n        const metadataFileResponse = metadataFileResponses[i];\n        const fieldItems = schemaFileResponse.items.items;\n\n        let browseFields = metadataFileResponse.table.browse_fields;\n        browseFields = Array.isArray(browseFields) ? browseFields : [browseFields];\n\n        const columnIndexes = [];\n        browseFields.forEach((browseFieldSetObj) => {\n          if (typeof browseFieldSetObj === 'string') {\n            browseFieldSetObj = {set: [browseFieldSetObj]};\n          }\n          if (!browseFieldSetObj.name) {\n            browseFieldSetObj.name = browseFieldSetObj.set.join(',');\n          }\n          const browseFieldSetName = browseFieldSetObj.name;\n          const browseFieldSetIndexes = browseFieldSetObj.set.map((browseField) => {\n            // Need to convert to columns for numbers\n            //      to become valid key paths\n            return 'c' + (\n              fieldItems.findIndex((item) => item.title === browseField)\n            );\n          });\n          columnIndexes.push(...browseFieldSetIndexes);\n\n          log(\n            'Activate: Creating index:',\n            dataFileName,\n            'browseFields-' + browseFieldSetName,\n            browseFieldSetIndexes\n          );\n\n          // No need for using `presort` as our index will sort anyways\n          store.createIndex(\n            'browseFields-' + browseFieldSetName,\n            browseFieldSetIndexes\n          );\n        });\n\n        const uniqueColumnIndexes = [...new Set(columnIndexes)];\n\n        tableRows.forEach((tableRow, j) => {\n          // Todo: Optionally send notice when complete\n          // To take advantage of indexes on our arrays, we\n          //   need to transform them to objects! See https://github.com/w3c/IndexedDB/issues/209\n          const objRow = {\n            value: tableRow\n          };\n          uniqueColumnIndexes.forEach((colIdx) => {\n            objRow[colIdx] = tableRow[colIdx.slice(1)];\n          });\n          // log('objRow', objRow);\n          store.put(objRow, j);\n        });\n      });\n    });\n    req.addEventListener('success', ({target: {result: db}}) => {\n      log('Activate: Database set-up complete', db);\n      // Todo: Replace this with `ready()` check\n      //   in calling code?\n      resolve();\n    });\n    const onerr = (e) => {\n      console.log('eeee', e);\n      const {error = new Error('dbError')} = e;\n      console.log('error', error);\n      error.type = 'dbError';\n      reject(error);\n    };\n    req.addEventListener('blocked', onerr);\n    req.addEventListener('error', onerr);\n  });\n}\n"],"names":[],"mappings":"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"}